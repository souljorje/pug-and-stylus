@import url("https://fonts.googleapis.com/css?family=Open+Sans:300,400,600");
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-weight: inherit;
  font-style: inherit;
  font-family: inherit;
  font-size: 100%;
  vertical-align: baseline;
}
body {
  line-height: 1;
  color: #000;
  background: #fff;
}
ol,
ul {
  list-style: none;
}
table {
  border-collapse: separate;
  border-spacing: 0;
  vertical-align: middle;
}
caption,
th,
td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}
a img {
  border: none;
}
* {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  outline: none;
}
*::after,
*::before {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
body {
  font-family: Open Sans;
}
.container {
  width: 1170px;
  padding: 0 15px;
  margin: 0 auto;
  zoom: 1;
}
.container:before,
.container:after {
  content: "";
  display: table;
}
.container:after {
  clear: both;
}
h1,
h2,
h3 {
  font-weight: 300;
}
h1 {
  font-size: 3.75em;
  margin-bottom: 20px;
}
h2 {
  font-size: 2.1875em;
}
h3 {
  font-size: 1.875em;
  margin-bottom: 25px;
}
h5,
a {
  font-weight: 600;
}
p {
  font-size: 0.875em;
  line-height: 1.875em;
  color: #959595;
}
a {
  text-decoration: none;
  color: #fff;
  display: block;
}
a:hover {
  color: #959595;
}
button {
  cursor: pointer;
}
.head {
  background-image: url("../img/backgrounds/head-bg.png");
  min-height: 1209px;
  background-position: center;
  color: #fff;
}
.head .logo {
  background-image: url("../img/icons/logo.png");
  width: 92px;
  height: 41px;
  margin-left: 30px;
  margin-top: 50px;
}
.head-content {
  width: 42%;
  min-width: 242px;
  padding: 0 30px;
  margin-top: 300px;
}
.head-content p {
  color: #fff;
}
.info {
  margin-top: -175px;
  padding-bottom: 10%;
}
.info-wrap {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: end;
  -webkit-box-align: end;
          align-items: flex-end;
  -ms-flex-pack: justify;
  -webkit-box-pack: justify;
          justify-content: space-between;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}
.info article {
  max-width: 560px;
}
.info article p {
  margin-top: 25px;
}
.info-content {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -ms-flex-pack: center;
  -webkit-box-pack: center;
          justify-content: center;
  margin: 85px 0;
  color: #fff;
}
.info-content +h2 {
  margin-bottom: 65px;
}
.info-item {
  width: 33.3%;
  min-width: 225px;
  padding: 45px;
}
.info-item:nth-child(1) {
  background-color: #f5989d;
}
.info-item:nth-child(2) {
  background-color: #615f7d;
}
.info-item:nth-child(3) {
  background-image: url("../img/item-1.png");
  background-size: cover;
}
.info-item:nth-child(4) {
  width: 66.6%;
  background-image: url("../img/item-2.png");
  background-size: cover;
}
.info-item:nth-child(5) {
  background-color: #82ca9c;
}
.info-item p {
  color: #fff;
}
.info-item a {
  margin-top: 35px;
}
.info-item a span {
  background-image: url("../img/icons/arrow.png");
  width: 14px;
  height: 5px;
  display: inline-block;
  vertical-align: middle;
  margin-left: 15px;
}
.info-item a:hover span {
  background-image: url("../img/icons/arrow-g.png");
}
.info-content-2,
.reasons-content,
.footer-content {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -ms-flex-pack: justify;
  -webkit-box-pack: justify;
          justify-content: space-between;
  -ms-flex-align: center;
  -webkit-box-align: center;
          align-items: center;
}
.info-content-2 article,
.reasons-content article,
.footer-content article {
  width: 265px;
  margin-top: 30px;
}
.power {
  background-image: url("../img/backgrounds/power-bg.png");
  background-position: center;
  background-size: cover;
  min-height: 874px;
  color: #fff;
  padding: 450px 0 130px;
}
.power p {
  color: #fff;
}
.power-content {
  max-width: 500px;
}
.power-content a {
  margin-top: 25px;
}
.power-content a span {
  background-image: url("../img/icons/arrow.png");
  width: 14px;
  height: 5px;
  display: inline-block;
  vertical-align: middle;
  margin-left: 15px;
}
.power-content a:hover span {
  background-image: url("../img/icons/arrow-g.png");
}
.reasons {
  padding: 125px 0 160px;
  background-color: #82ca9c;
  color: #fff;
}
.reasons-content {
  padding-top: 30px;
}
.reasons-content article {
  width: 30%;
}
.reasons-content article p {
  color: inherit;
  margin-top: 30px;
}
.tarif {
  padding: 100px 0 145px;
  background-color: #f6f7fa;
}
.tarif-content {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: justify;
  -webkit-box-pack: justify;
          justify-content: space-between;
}
.tarif-item {
  max-width: 570px;
  min-width: 300px;
  text-align: left;
  padding: 55px;
  padding-right: 100px;
  margin: auto;
}
.tarif-item:hover {
  background-color: #fff;
  -webkit-box-shadow: 0px 0px 35px rgba(0,0,0,0.1);
  box-shadow: 0px 0px 35px rgba(0,0,0,0.1);
}
.tarif-item .price {
  font-size: 0.75em;
  font-weight: 600;
  text-transform: uppercase;
  color: #fff;
  border-radius: 6px;
  display: inline-block;
  padding: 7px 17px;
  margin-bottom: 25px;
}
.tarif-item:nth-child(1) .price {
  background-color: #e1e1e1;
}
.tarif-item:nth-child(2) .price {
  background-color: #bd8cbf;
}
.tarif-item button {
  background-color: #82ca9c;
  text-transform: uppercase;
  color: #fff;
  font-weight: 600;
  padding: 18px 30px;
  border-radius: 5px;
  border: 0;
  margin: 25px 0 20px;
  display: block;
}
.tarif-item button:hover {
  background-color: #91dbad;
}
.tarif-item .apple,
.tarif-item .windows {
  display: inline-block;
  width: 24px;
  height: 24px;
  background-repeat: no-repeat;
  margin-right: 16px;
}
.tarif-item .apple {
  background-image: url("../img/icons/apple.png");
}
.tarif-item .windows {
  background-image: url("../img/icons/windows.png");
}
.footer {
  background-color: #192431;
  min-height: 605px;
  padding: 130px 0;
  color: #f6f7fa;
}
.footer-content {
  -ms-flex-align: start;
  -webkit-box-align: start;
          align-items: flex-start;
  margin-bottom: 28px;
}
.footer-content > * {
  -ms-flex-preferred-size: 45%;
      flex-basis: 45%;
}
.footer-content h5 {
  margin-bottom: 28px;
}
.footer-content p {
  color: #f6f7fa;
}
.footer form .form-wrap {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}
.footer form .form-wrap > * {
  height: 58px;
}
.footer form input {
  width: 85%;
  font-size: 1.8em;
  padding: 0 10px;
  color: #959595;
  font-weight: 300;
  font-family: Open Sans;
  border-radius: 3px 0 0 3px;
  border: 0;
}
.footer form button {
  width: 15%;
  border-radius: 0 3px 3px 0;
  border: 0;
  background-color: #82ca9c;
  text-align: center;
}
.footer form button:hover {
  background-color: #91dbad;
}
.footer form button span {
  background-image: url("../img/icons/check.png");
  width: 24px;
  height: 18px;
  display: inline-block;
}
.footer form p {
  font-size: 0.85em;
  line-height: 1.85em;
  color: #57697f;
  margin-top: 15px;
}
.footer nav {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: start;
  -webkit-box-pack: start;
          justify-content: flex-start;
}
.footer nav ul {
  margin-right: 90px;
}
.footer nav ul h5 {
  margin-bottom: 30px;
}
.footer nav ul li {
  margin-bottom: 13px;
}
.footer nav ul li a {
  font-size: 0.875em;
  font-weight: 400;
  cursor: pointer;
}
@media only screen and (max-width: 1200px) {
  .container {
    width: 970px;
  }
  .info-content-2 {
    -ms-flex-pack: distribute;
    justify-content: space-around;
  }
}
@media only screen and (max-width: 992px) {
  .container {
    width: 750px;
  }
}
@media only screen and (max-width: 767px) {
  .container {
    width: 100%;
  }
  .reasons-content article {
    width: 100%;
  }
  .tarif-content {
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
  }
  .tarif-item {
    padding-right: 55px;
  }
  .footer-content > * {
    -ms-flex-preferred-size: 100%;
        flex-basis: 100%;
  }
  .footer nav {
    max-width: 440px;
    -ms-flex-pack: justify;
    -webkit-box-pack: justify;
            justify-content: space-between;
    margin: auto;
  }
  .footer nav ul {
    margin-right: 0;
  }
}
@media only screen and (max-width: 704px) {
  .info-content {
    margin: 85px auto;
  }
  .info-item {
    width: auto;
  }
  .info-item:nth-child(4) {
    -ms-flex-order: 5;
    -webkit-box-ordinal-group: 6;
            order: 5;
    width: auto;
  }
}
@media only screen and (max-width: 480px) {
  .info-content {
    max-width: 450px;
    margin: inherit auto;
  }
  .info-item:nth-child(4) {
    -ms-flex-order: 5;
    -webkit-box-ordinal-group: 6;
            order: 5;
    width: auto;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
